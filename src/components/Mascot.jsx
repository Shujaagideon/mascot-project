/* eslint-disable no-unused-vars */
/* eslint-disable react/prop-types */
/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://gitub.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 mascot.glb --transform
*/

import { useGLTF } from '@react-three/drei';
import React, { useState } from 'react';
import {editable as e} from '@theatre/r3f';
import * as THREE from 'three';
import glossyTex from '../assets/glossy2.jpg';
import brushTex from '../assets/drawing2.png';
import sideDots from '../assets/tex2.png';
import disp from '../assets/disp1.jpg';
import metal from '../assets/metal.jpg';
import { types as t } from "@theatre/core";
import { useFrame, useLoader, useThree } from '@react-three/fiber';

const loader = new THREE.TextureLoader()

const texture = loader.load(glossyTex);
texture.colorSpace = THREE.SRGBColorSpace;

const texture2 = loader.load(brushTex);
texture2.colorSpace = THREE.SRGBColorSpace;

const texture3 = loader.load(metal);
texture3.colorSpace = THREE.SRGBColorSpace;
texture3.wrapS = THREE.RepeatWrapping
texture3.wrapT = THREE.RepeatWrapping

const texture4 = loader.load(sideDots);
texture4.colorSpace = THREE.SRGBColorSpace;

const displacement = loader.load(disp);
texture4.colorSpace = THREE.SRGBColorSpace;

const uniforms = {
  opacity: { value: 0. },
  material1: { value: 0. },
  material2: { value: 0. },
  material3: { value: 0. },
  time: { value: 0. },
  uTexture: { value: texture },
  uTexture2: { value: texture2 },
  uTexture3: { value: texture3 },
  uTexture4: { value: texture4 },
  displacement: { value: displacement },
  width: {value: 0.5},
  scaleX: {value: 40},
  scaleY: {value: 40},
  lightPos: {value: new THREE.Vector3(-1., -.2, -.8)},
  clampVal: {value: new THREE.Vector2(0., 1.)}
}

const shader = new THREE.ShaderMaterial({
  uniforms,
  transparent: true,
  vertexShader: /*glsl*/`
    varying vec3 vNormal;
    varying vec3 vPosition;
    varying vec2 vUv;
  
    void main() {
      vUv = uv;
      vNormal = normal;
      vPosition = position;
      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
    }
  `,
  fragmentShader:/*glsl*/`
    varying vec3 vNormal;
    varying vec3 vPosition;
    varying vec2 vUv;

    uniform sampler2D uTexture;
    uniform sampler2D uTexture2;
    uniform sampler2D uTexture3;
    uniform sampler2D uTexture4;
    uniform sampler2D displacement;
    uniform vec3 lightPos;
    uniform vec2 clampVal;
    uniform float material1;
    uniform float material2;
    uniform float material3;
    uniform float opacity;
    uniform float width;
		uniform float scaleX;
		uniform float scaleY;
		uniform float time;


    		//	by Stefan Gustavson
		//
		vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}
		vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}
		vec4 fade(vec4 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}

		float cnoise(vec4 P){
		  ;
		  vec4 Pi0 = floor(P); // Integer part for indexing
		  vec4 Pi1 = Pi0 + 1.0; // Integer part + 1
		  Pi0 = mod(Pi0, 289.0);
		  Pi1 = mod(Pi1, 289.0);
		  vec4 Pf0 = fract(P); // Fractional part for interpolation
		  vec4 Pf1 = Pf0 - 1.0; // Fractional part - 1.0
		  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
		  vec4 iy = vec4(Pi0.yy, Pi1.yy);
		  vec4 iz0 = vec4(Pi0.zzzz);
		  vec4 iz1 = vec4(Pi1.zzzz);
		  vec4 iw0 = vec4(Pi0.wwww);
		  vec4 iw1 = vec4(Pi1.wwww);

		  vec4 ixy = permute(permute(ix) + iy);
		  vec4 ixy0 = permute(ixy + iz0);
		  vec4 ixy1 = permute(ixy + iz1);
		  vec4 ixy00 = permute(ixy0 + iw0);
		  vec4 ixy01 = permute(ixy0 + iw1);
		  vec4 ixy10 = permute(ixy1 + iw0);
		  vec4 ixy11 = permute(ixy1 + iw1);

		  vec4 gx00 = ixy00 / 7.0;
		  vec4 gy00 = floor(gx00) / 7.0;
		  vec4 gz00 = floor(gy00) / 6.0;
		  gx00 = fract(gx00) - 0.5;
		  gy00 = fract(gy00) - 0.5;
		  gz00 = fract(gz00) - 0.5;
		  vec4 gw00 = vec4(0.75) - abs(gx00) - abs(gy00) - abs(gz00);
		  vec4 sw00 = step(gw00, vec4(0.0));
		  gx00 -= sw00 * (step(0.0, gx00) - 0.5);
		  gy00 -= sw00 * (step(0.0, gy00) - 0.5);

		  vec4 gx01 = ixy01 / 7.0;
		  vec4 gy01 = floor(gx01) / 7.0;
		  vec4 gz01 = floor(gy01) / 6.0;
		  gx01 = fract(gx01) - 0.5;
		  gy01 = fract(gy01) - 0.5;
		  gz01 = fract(gz01) - 0.5;
		  vec4 gw01 = vec4(0.75) - abs(gx01) - abs(gy01) - abs(gz01);
		  vec4 sw01 = step(gw01, vec4(0.0));
		  gx01 -= sw01 * (step(0.0, gx01) - 0.5);
		  gy01 -= sw01 * (step(0.0, gy01) - 0.5);

		  vec4 gx10 = ixy10 / 7.0;
		  vec4 gy10 = floor(gx10) / 7.0;
		  vec4 gz10 = floor(gy10) / 6.0;
		  gx10 = fract(gx10) - 0.5;
		  gy10 = fract(gy10) - 0.5;
		  gz10 = fract(gz10) - 0.5;
		  vec4 gw10 = vec4(0.75) - abs(gx10) - abs(gy10) - abs(gz10);
		  vec4 sw10 = step(gw10, vec4(0.0));
		  gx10 -= sw10 * (step(0.0, gx10) - 0.5);
		  gy10 -= sw10 * (step(0.0, gy10) - 0.5);

		  vec4 gx11 = ixy11 / 7.0;
		  vec4 gy11 = floor(gx11) / 7.0;
		  vec4 gz11 = floor(gy11) / 6.0;
		  gx11 = fract(gx11) - 0.5;
		  gy11 = fract(gy11) - 0.5;
		  gz11 = fract(gz11) - 0.5;
		  vec4 gw11 = vec4(0.75) - abs(gx11) - abs(gy11) - abs(gz11);
		  vec4 sw11 = step(gw11, vec4(0.0));
		  gx11 -= sw11 * (step(0.0, gx11) - 0.5);
		  gy11 -= sw11 * (step(0.0, gy11) - 0.5);

		  vec4 g0000 = vec4(gx00.x,gy00.x,gz00.x,gw00.x);
		  vec4 g1000 = vec4(gx00.y,gy00.y,gz00.y,gw00.y);
		  vec4 g0100 = vec4(gx00.z,gy00.z,gz00.z,gw00.z);
		  vec4 g1100 = vec4(gx00.w,gy00.w,gz00.w,gw00.w);
		  vec4 g0010 = vec4(gx10.x,gy10.x,gz10.x,gw10.x);
		  vec4 g1010 = vec4(gx10.y,gy10.y,gz10.y,gw10.y);
		  vec4 g0110 = vec4(gx10.z,gy10.z,gz10.z,gw10.z);
		  vec4 g1110 = vec4(gx10.w,gy10.w,gz10.w,gw10.w);
		  vec4 g0001 = vec4(gx01.x,gy01.x,gz01.x,gw01.x);
		  vec4 g1001 = vec4(gx01.y,gy01.y,gz01.y,gw01.y);
		  vec4 g0101 = vec4(gx01.z,gy01.z,gz01.z,gw01.z);
		  vec4 g1101 = vec4(gx01.w,gy01.w,gz01.w,gw01.w);
		  vec4 g0011 = vec4(gx11.x,gy11.x,gz11.x,gw11.x);
		  vec4 g1011 = vec4(gx11.y,gy11.y,gz11.y,gw11.y);
		  vec4 g0111 = vec4(gx11.z,gy11.z,gz11.z,gw11.z);
		  vec4 g1111 = vec4(gx11.w,gy11.w,gz11.w,gw11.w);

		  vec4 norm00 = taylorInvSqrt(vec4(dot(g0000, g0000), dot(g0100, g0100), dot(g1000, g1000), dot(g1100, g1100)));
		  g0000 *= norm00.x;
		  g0100 *= norm00.y;
		  g1000 *= norm00.z;
		  g1100 *= norm00.w;

		  vec4 norm01 = taylorInvSqrt(vec4(dot(g0001, g0001), dot(g0101, g0101), dot(g1001, g1001), dot(g1101, g1101)));
		  g0001 *= norm01.x;
		  g0101 *= norm01.y;
		  g1001 *= norm01.z;
		  g1101 *= norm01.w;

		  vec4 norm10 = taylorInvSqrt(vec4(dot(g0010, g0010), dot(g0110, g0110), dot(g1010, g1010), dot(g1110, g1110)));
		  g0010 *= norm10.x;
		  g0110 *= norm10.y;
		  g1010 *= norm10.z;
		  g1110 *= norm10.w;

		  vec4 norm11 = taylorInvSqrt(vec4(dot(g0011, g0011), dot(g0111, g0111), dot(g1011, g1011), dot(g1111, g1111)));
		  g0011 *= norm11.x;
		  g0111 *= norm11.y;
		  g1011 *= norm11.z;
		  g1111 *= norm11.w;

		  float n0000 = dot(g0000, Pf0);
		  float n1000 = dot(g1000, vec4(Pf1.x, Pf0.yzw));
		  float n0100 = dot(g0100, vec4(Pf0.x, Pf1.y, Pf0.zw));
		  float n1100 = dot(g1100, vec4(Pf1.xy, Pf0.zw));
		  float n0010 = dot(g0010, vec4(Pf0.xy, Pf1.z, Pf0.w));
		  float n1010 = dot(g1010, vec4(Pf1.x, Pf0.y, Pf1.z, Pf0.w));
		  float n0110 = dot(g0110, vec4(Pf0.x, Pf1.yz, Pf0.w));
		  float n1110 = dot(g1110, vec4(Pf1.xyz, Pf0.w));
		  float n0001 = dot(g0001, vec4(Pf0.xyz, Pf1.w));
		  float n1001 = dot(g1001, vec4(Pf1.x, Pf0.yz, Pf1.w));
		  float n0101 = dot(g0101, vec4(Pf0.x, Pf1.y, Pf0.z, Pf1.w));
		  float n1101 = dot(g1101, vec4(Pf1.xy, Pf0.z, Pf1.w));
		  float n0011 = dot(g0011, vec4(Pf0.xy, Pf1.zw));
		  float n1011 = dot(g1011, vec4(Pf1.x, Pf0.y, Pf1.zw));
		  float n0111 = dot(g0111, vec4(Pf0.x, Pf1.yzw));
		  float n1111 = dot(g1111, Pf1);

		  vec4 fade_xyzw = fade(Pf0);
		  vec4 n_0w = mix(vec4(n0000, n1000, n0100, n1100), vec4(n0001, n1001, n0101, n1101), fade_xyzw.w);
		  vec4 n_1w = mix(vec4(n0010, n1010, n0110, n1110), vec4(n0011, n1011, n0111, n1111), fade_xyzw.w);
		  vec4 n_zw = mix(n_0w, n_1w, fade_xyzw.z);
		  vec2 n_yzw = mix(n_zw.xy, n_zw.zw, fade_xyzw.y);
		  float n_xyzw = mix(n_yzw.x, n_yzw.y, fade_xyzw.x);
		  return 2.2 * n_xyzw;
		}


		float map(float value, float min1, float max1, float min2, float max2) {
		  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);
		}

		float parabola( float x, float k ) {
		  return pow( 4. * x * ( 1. - x ), k );
		}


    vec2 mirrored(vec2 v) {
			vec2 m = mod(v,2.);
			return mix(m,2.0 - m, step(1.0 ,m));
		}

    void main() {
        float dt = parabola(material1,1.);
        float dt1 = parabola(material2,1.);
        float dt2 = parabola(material3,1.);
        float border = 1.;


        float realnoise = 0.5 * (cnoise(vec4(vUv.x * 20.  + 0. * time/3., vUv.y * 20.,0.* time/3.,0.)) + 1.);

        float w = 1.5*dt;
        float w1 = 1.5*dt1;
        float w2 = 1.5*dt2;

        float maskvalue = smoothstep(1. - w,1.,vUv.y + mix(-w/2., 1. - w/2., material1));
        float maskvalue1 = smoothstep(1. - w1,1.,vUv.y + mix(-w1/2., 1. - w1/2., material2));
        float maskvalue2 = smoothstep(1. - w2,1.,vUv.y + mix(-w2/2., 1. - w2/2., material3));



        float mask = maskvalue + maskvalue*realnoise;
        float mask1 = maskvalue1 + maskvalue1*realnoise;
        float mask2 = maskvalue1 + maskvalue2*realnoise;
        // float mask = maskvalue;

        float fin = smoothstep(border,border+0.01,mask);
        float fin1 = smoothstep(border,border+0.01,mask1);
        float fin2 = smoothstep(border,border+0.01,mask2);


        float light = dot(vNormal, normalize(lightPos)) * 0.5 + 0.5;
        light = clamp(light, clampVal.x, clampVal.y) * opacity;

        vec4 glossyMat = texture2D(uTexture, vUv);
        vec4 glossyColor = vec4(glossyMat.xyz, light)  + vec4(.4, .02, .3, light) * 1.5;

        vec4 brushMat = texture2D(uTexture2, vUv);
        vec4 brushColor = vec4(brushMat.xyz, light) * 1.3;

        vec4 metalMat = texture2D(uTexture3, vUv) * 1.3;
        vec4 dotMat = texture2D(uTexture4, vUv);
        

        vec4 mixMat = mix(metalMat, dotMat, light);

        vec4 part1 = mix(vec4(light),brushColor, fin);
        vec4 part2 = mix(part1, glossyColor, fin1);
        vec4 final = mix(part2, mixMat, fin2);
        gl_FragColor = final;
    }
  `,
})

export function Mascot({material, sheet, reference, beam}) {
  const ref = React.useRef();
  const ref3 = React.useRef();
  const refBeam = React.useRef();
  const { nodes, materials } = useGLTF('/mascot-transformed.glb');
  const [changer, setChanger] = React.useState(0);
  const { viewport } = useThree()
  const [val, setVal] = useState(new THREE.Vector2())

  const num = -15.946048795792349;
  
  // useEffect(()=>{
  //   document.addEventListener('mousemove', _=>{
  //   })
  // },[val])
  
  useFrame(({clock, mouse})=>{
    uniforms.time.value = clock.getElapsedTime();
    
    const x = (mouse.x * viewport.width) / 2;
    const y = (mouse.y * viewport.height) / 2;
    if (beam.current.position.z !== num){
      // gsap.fromTo(reference.current.rotation,{
      //   z: reference.current.rotation.z,
      //   ease: 'Power.easeIn',
      //   duration: 0.6
      // },{
      //   z: y * 0.01,
      //   ease: 'Power.easeIn',
      //   duration: 0.6
      // })
    }
    else{
      null
    }

    setVal(new THREE.Vector2(x,y))
    
    // ref.current.position.set(x, y, 0)
  })
    

  const mascotMat = sheet.object('MascotMaterial',{
    opacity: t.number(0, {
        nudgeMultiplier: 0.1,
        range: [0, 1]
    }),
    beamOpacity: t.number(0, {
      nudgeMultiplier: 0.1,
      range: [0, 1]
    }),
    clamp:{
      x: t.number(0, {
        nudgeMultiplier: 0.1,
        range: [0, 1]
      }),
      y: t.number(0, {
        nudgeMultiplier: 0.1,
        range: [0, 2]
      })
    },
    mat1: t.number(0, {
      nudgeMultiplier: 0.1,
      range: [0, 1]
    }),
    mat2: t.number(0, {
      nudgeMultiplier: 0.1,
      range: [0, 1]
    }),
    mat3: t.number(0, {
      nudgeMultiplier: 0.1,
      range: [0, 1]
    }),
    materialChanger: t.number(0, {
      nudgeMultiplier: 1,
      range: [-0.1, 2.2]
    }),
    sunSetter: t.boolean(true),
    lightPos: {
      x: uniforms.lightPos.value.x,
      y: uniforms.lightPos.value.y,
      z: uniforms.lightPos.value.z
    },
    
  },{reconfigure: true});

  React.useEffect(()=>{
    mascotMat.onValuesChange(val=>{
      uniforms.opacity.value = val.opacity;
      uniforms.clampVal.value.x = val.clamp.x;
      uniforms.clampVal.value.y = val.clamp.y;
      uniforms.material1.value = val.mat1;
      uniforms.material2.value = val.mat2;
      uniforms.material3.value = val.mat3;
      uniforms.lightPos.value.x = val.lightPos.x;
      uniforms.lightPos.value.y = val.lightPos.y;
      uniforms.lightPos.value.z = val.lightPos.z;

      // ref3.current.opacity = val.beamOpacity
      shader.needsUpdate = true
      setChanger(val.materialChanger);
      if(val.materialChanger <= 0){
        ref.current.material = material
      }
      else if(val.materialChanger === 1 || val.materialChanger > 0 && val.materialChanger < 2){
        ref.current.material = shader
      }
      else if(val.materialChanger > 1.8){
        ref.current.material = materials['Tooth_Mixed_Material_2.004']
      }
    })

  },[mascotMat]);
  
  return (
    <e.group theatreKey='mascotPeople'>
      <e.group theatreKey='Mascot' dispose={null} ref={beam}>
        <mesh geometry={nodes.Sphere_1.geometry} ref={ref} position={[0, 2, 0]} rotation={[Math.PI / 2, 0, 0]}/>
        {/* <e.group theatreKey='planetsBeamParent' position={[0, -20, -35]} ref={reference}>
            <e.mesh theatreKey='planetsBeam' ref={refBeam} position={[0, 28.47, 10.21]}>
                <planeGeometry args={[100,80]}/>
                <meshBasicMaterial ref={ref3} map={texture} color="#999" side={THREE.DoubleSide} transparent depthWrite={false} depthTest={false}/>
            </e.mesh>
        </e.group> */}
      </e.group>
    </e.group>
  )
}

useGLTF.preload('/mascot-transformed.glb');
