/* eslint-disable react/prop-types */
/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 moon.glb --transform
*/

import React from 'react'
import { useGLTF } from '@react-three/drei'
import { editable as e } from "@theatre/r3f";
// import { types as t } from "@theatre/core";
import { useFrame } from '@react-three/fiber';
import gsap from 'gsap';
import * as THREE from 'three';

export function Moon({name, pos, opacity, mascot, beam}) {
  const { nodes, materials } = useGLTF('/moon-transformed.glb');
  const clone = materials['Mat.001'].clone();
  clone.opacity = 0
  clone.transparent = true
  const ref = React.useRef();
  const num = -15.946048795792349;
  let hovered = 0;

  // const sheet = project.sheet(name);
  const configs = [
    {
      name: 'moon',
      mascot: 0.79,
      mascotPos: {
        x: 0.34,
        y: -5.96
      },
      beamRotation:-0.74,
      beamPos: {
        x:14.03,
        y:27.82
      },
      scale:{
        x: 0.43,
        y: 0.82
      }
    },
    {
      name: 'moon1',
      mascot: 1.2,
      mascotPos: {
        x: 1.816,
        y: -7.526
      },
      beamRotation: -1.25,
      beamPos: {
        x: 22.26,
        y: 20.27
      },
      scale:{
        x: 0.43,
        y: 0.94
      }
    },
    {
      name: 'moon2',
      mascot: -0.74,
      mascotPos: {
        x: -1.199,
        y: -4.82
      },
      beamRotation: 0.77,
      beamPos: {
        x: -13.96,
        y: 26.91
      },
      scale:{
        x: 0.43,
        y: 0.80
      }
    },
    {
      name: 'moon3',
      mascot: -1.25,
      mascotPos: {
        x: -3.869,
        y: -5.42
      },
      beamRotation: 1.26,
      beamPos: {
        x: -22.16,
        y: 19.83
      },
      scale:{
        x: 0.43,
        y: 0.94
      }
    }
  ]


  useFrame(()=>{
    ref.current.rotation.z += 0.008
    if (beam.current.position.z === num && hovered){
      mascot.current.rotation.z = configs[pos].mascot
    }
    else{
      null
    }
  })
  const hello2 = ()=>{
    clone.color = new THREE.Color('#888');
    hovered = false;
  }

  const hello = ()=>{
    clone.color = new THREE.Color('#fff');
    hovered = true;
    
  }

  React.useEffect(()=>{
    clone.transparent = true;
    clone.opacity = opacity;
    if(opacity > 0.8){
      clone.color = new THREE.Color('#888');
    }

  },[opacity])
  return (
    <e.group theatreKey={name} dispose={null} onPointerEnter={()=>hello()} onPointerLeave={()=>hello2()} onClick={()=> hello()}>
      <e.pointLight theatreKey='beamPointLight'/>
      <mesh ref={ref} geometry={nodes.Sphere001.geometry} material={clone} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
    </e.group>
  )
}

useGLTF.preload('/moon-transformed.glb')
