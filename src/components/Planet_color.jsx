/* eslint-disable react/prop-types */
/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 planet_color.glb --transform
*/

import React from 'react'
import { useGLTF } from '@react-three/drei'
import { editable as e } from "@theatre/r3f";
import * as THREE from 'three';
import gsap from 'gsap';

export function PlanetColor({opacity, mascot, beam}) {
  const { nodes, materials } = useGLTF('/planet_color-transformed.glb');

  const hello2 = ()=>{
    materials.Mat.color = new THREE.Color('#888');
  }

  const hello = ()=>{
    materials.Mat.color = new THREE.Color('#fff');
    gsap.fromTo(mascot.current.rotation,{
      z: mascot.current.rotation.z,
      duration: 0.3,
      ease: 'Power.easeOut'
    },
    {
      z: 0,
      duration: 0.3,
      ease: 'Power.easeOut'
    }
    )
    gsap.fromTo(mascot.current.position,{
      x: mascot.current.position.x,
      y: mascot.current.position.y,
      duration: 0.3,
      ease: 'Power.easeOut'
    },
    {
      x: 0,
      y: -4.82,
      duration: 0.3,
      ease: 'Power.easeOut'
    }
    )
    // gsap.fromTo(beam.current.rotation,{
    //   z: beam.current.rotation.z,
    //   duration: 0.3,
    //   ease: 'Power.easeOut'
    // },
    // {
    //   z: 0,
    //   duration: 0.3,
    //   ease: 'Power.easeOut'
    // })
    // gsap.fromTo(beam.current.position,{
    //   x: beam.current.position.x,
    //   y: beam.current.position.y,
    //   duration: 0.3,
    //   ease: 'Power.easeOut'
    // },{
    //   x: 0,
    //   y: 28.47,
    //   duration: 0.3,
    //   ease: 'Power.easeOut'
    // })
    // gsap.fromTo(beam.current.scale,{
    //   x: beam.current.scale.x,
    //   y: beam.current.scale.y,
    //   duration: 0.3,
    //   ease: 'Power.easeOut'
    // },{
    //   x: 0.43,
    //   y: 0.62,
    //   duration: 0.3
    // })

  }
  
  React.useEffect(()=>{
      materials.Mat.transparent = true;
      materials.Mat.opacity = opacity;
      materials.Mat.color = new THREE.Color('#888');
  },[opacity])
  return (
    <e.group theatreKey='planet_color' dispose={null} onPointerLeave={()=>hello2()} onPointerEnter={()=>hello()} onClick={()=>hello()}>
      <mesh geometry={nodes.Sphere001.geometry} material={materials.Mat} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
    </e.group>
  )
}

useGLTF.preload('/planet_color-transformed.glb');
